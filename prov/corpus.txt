# Fonction  rechercher des documents
def search_documents(query, term_doc_matrix):
    indexed_query = indexation(query)
    tf_query, vocabulaire_query = calculate_tf_query_with_query_vocab(indexed_query)
    term_doc_matrix_filtered = term_doc_matrix.loc[term_doc_matrix.index.intersection(vocabulaire_query)].fillna(0)
    document_vectors = term_doc_matrix_filtered.values.T
    query_vector = tf_query.reshape(1, -1)
    similarities = cosine_similarity(query_vector, document_vectors)[0]
    document_ids = list(term_doc_matrix.columns)
    similarity_scores = list(zip(document_ids, similarities))
    similarity_scores = sorted(similarity_scores, key=lambda x: x[1], reverse=True)
    return similarity_scores, indexed_query, term_doc_matrix_filtered

# Fonction pour appliquer l'algorithme de Rocchio
def rocchio_update(query_vector, term_doc_matrix, relevant_docs, non_relevant_docs, alpha=1, beta=0.75, gamma=0.15):
    relevant_vectors = term_doc_matrix.iloc[:, relevant_docs].values if relevant_docs else np.zeros_like(query_vector)
    non_relevant_vectors = term_doc_matrix.iloc[:, non_relevant_docs].values if non_relevant_docs else np.zeros_like(query_vector)
    relevant_mean = relevant_vectors.mean(axis=1) if relevant_docs else 0
    non_relevant_mean = non_relevant_vectors.mean(axis=1) if non_relevant_docs else 0
    updated_query_vector = alpha * query_vector + beta * relevant_mean - gamma * non_relevant_mean
    return updated_query_vector

# Interface 
def search_interface():
    def perform_search():
        query = query_entry.get().strip()
        if not query:
            messagebox.showerror("Erreur", "Veuillez entrer une requête.")
            return
        global similarity_scores, indexed_query, filtered_term_doc_matrix
        similarity_scores, indexed_query, filtered_term_doc_matrix = search_documents(query, term_doc_matrix)
        results_list.delete(0, tk.END)
        for doc_id, score in similarity_scores:
            results_list.insert(tk.END, f"Document {doc_id} - Similarité : {score:.4f}")

    def get_selected_documents():
        selected_indices = results_list.curselection()
        relevant_docs = [int(results_list.get(i).split()[1]) - 1 for i in selected_indices]
        non_relevant_docs = [i for i in range(len(similarity_scores)) if i not in relevant_docs]
        
        # Mise à jour de la requête avec Rocchio
        initial_query_vector, _ = calculate_tf_query_with_query_vocab(indexed_query)
        updated_query_vector = rocchio_update(
            initial_query_vector,
            filtered_term_doc_matrix,
            relevant_docs,
            non_relevant_docs
        )
        
        # Recherche avec la requête mise à jour
        document_vectors = filtered_term_doc_matrix.values.T
        updated_similarities = cosine_similarity(updated_query_vector.reshape(1, -1), document_vectors)[0]
        updated_similarity_scores = list(zip(filtered_term_doc_matrix.columns, updated_similarities))
        updated_similarity_scores = sorted(updated_similarity_scores, key=lambda x: x[1], reverse=True)
        
        # Afficher les résultats mis à jour
        results_list.delete(0, tk.END)
        for doc_id, score in updated_similarity_scores:
            results_list.insert(tk.END, f"Document {doc_id} - Similarité : {score:.4f}")
        
        messagebox.showinfo("Mise à jour terminée", "La requête a été reformulée avec l'algorithme de Rocchio.")

    # Charger la matrice TF des documents
    global term_doc_matrix
    term_doc_matrix = pd.read_csv(r'C:\\Users\\PC\\Desktop\\presentation_RI\\term_tf_matrix.csv', index_col=0)